"""
DIANA - Script de chiffrement du mod√®le
Utilitaire pour chiffrer le mod√®le ONNX avant distribution
"""

import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

import config
from src.encryption_manager import EncryptionManager


def main():
    """Chiffre un mod√®le ONNX"""
    print("=" * 60)
    print("DIANA - Chiffrement de mod√®le ONNX")
    print("=" * 60)
    
    # Demander le chemin du mod√®le source
    model_path = input("\nChemin du mod√®le ONNX √† chiffrer: ").strip()
    
    if not model_path:
        print("‚ùå Aucun chemin sp√©cifi√©")
        return
    
    model_path = Path(model_path)
    
    if not model_path.exists():
        print(f"‚ùå Fichier introuvable: {model_path}")
        return
    
    if not model_path.suffix == '.onnx':
        print("‚ö†Ô∏è  Attention: Le fichier n'a pas l'extension .onnx")
        confirm = input("Continuer quand m√™me ? (o/n): ").strip().lower()
        if confirm != 'o':
            return
    
    # Demander le chemin de sortie
    output_path = input(f"Chemin de sortie (d√©faut: {config.MODEL_ENCRYPTED_PATH}): ").strip()
    
    if not output_path:
        output_path = config.MODEL_ENCRYPTED_PATH
    else:
        output_path = Path(output_path)
    
    # Cr√©er le dossier de sortie si n√©cessaire
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    print(f"\nüìÅ Source: {model_path}")
    print(f"üìÅ Destination: {output_path}")
    print(f"üîë Cl√© de chiffrement: {'*' * 20}...")
    
    confirm = input("\nLancer le chiffrement ? (o/n): ").strip().lower()
    
    if confirm != 'o':
        print("‚ùå Op√©ration annul√©e")
        return
    
    # Chiffrer le mod√®le
    print("\nüîê Chiffrement en cours...")
    
    encryption_manager = EncryptionManager()
    success = encryption_manager.encrypt_file(model_path, output_path)
    
    if success:
        print(f"‚úÖ Mod√®le chiffr√© avec succ√®s !")
        print(f"üìä Taille: {output_path.stat().st_size / (1024*1024):.2f} MB")
        
        # V√©rifier le fichier chiffr√©
        print("\nüîç V√©rification du fichier chiffr√©...")
        if encryption_manager.verify_encrypted_file(output_path):
            print("‚úÖ Fichier valide et d√©chiffrable")
        else:
            print("‚ö†Ô∏è  Attention: Le fichier chiffr√© semble invalide")
    else:
        print("‚ùå √âchec du chiffrement")


if __name__ == "__main__":
    main()

