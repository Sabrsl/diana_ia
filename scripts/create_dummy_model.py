"""
DIANA - Cr√©ation d'un mod√®le ONNX dummy pour tests
Ce script cr√©e un mod√®le simple pour tester l'application sans mod√®le r√©el
"""

import sys
from pathlib import Path

try:
    import torch
    import torch.nn as nn
except ImportError:
    print("‚ùå PyTorch n'est pas install√©")
    print("üí° Installez-le avec: pip install torch")
    sys.exit(1)


class DummyBreastCancerModel(nn.Module):
    """
    Mod√®le dummy pour tests
    Ne doit PAS √™tre utilis√© en production !
    """
    
    def __init__(self):
        super().__init__()
        
        # Feature extractor simple
        self.features = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1),
            
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            
            nn.Conv2d(128, 256, kernel_size=3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.AdaptiveAvgPool2d((1, 1))
        )
        
        # Classifier
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Dropout(0.5),
            nn.Linear(256, 128),
            nn.ReLU(inplace=True),
            nn.Dropout(0.3),
            nn.Linear(128, 2)  # 2 classes : b√©nin, malin
        )
        
        # Initialiser les poids de mani√®re r√©aliste
        self._initialize_weights()
    
    def _initialize_weights(self):
        """Initialise les poids du mod√®le"""
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
                if m.bias is not None:
                    nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                nn.init.normal_(m.weight, 0, 0.01)
                nn.init.constant_(m.bias, 0)
    
    def forward(self, x):
        """Forward pass"""
        x = self.features(x)
        x = self.classifier(x)
        return x


def create_dummy_model(output_path: str = "models/breast_cancer_model.onnx"):
    """
    Cr√©e et exporte un mod√®le ONNX dummy
    
    Args:
        output_path: Chemin de sortie du mod√®le ONNX
    """
    print("=" * 60)
    print("DIANA - Cr√©ation d'un mod√®le dummy pour tests")
    print("=" * 60)
    print("\n‚ö†Ô∏è  ATTENTION: Ce mod√®le est UNIQUEMENT pour les tests !")
    print("Ne l'utilisez PAS en production m√©dicale !\n")
    
    # Cr√©er le mod√®le
    print("üì¶ Cr√©ation du mod√®le...")
    model = DummyBreastCancerModel()
    model.eval()
    
    # Cr√©er un input dummy
    dummy_input = torch.randn(1, 3, 224, 224)
    
    # Tester le mod√®le
    print("üß™ Test du mod√®le...")
    with torch.no_grad():
        output = model(dummy_input)
        print(f"   Input shape: {dummy_input.shape}")
        print(f"   Output shape: {output.shape}")
        
        # Appliquer softmax pour avoir des probabilit√©s
        probs = torch.softmax(output, dim=1)
        print(f"   Probabilities: {probs[0].tolist()}")
    
    # S'assurer que le dossier existe
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Exporter en ONNX
    print(f"\nüíæ Export ONNX vers {output_path}...")
    
    torch.onnx.export(
        model,
        dummy_input,
        output_path,
        export_params=True,
        opset_version=14,
        do_constant_folding=True,
        input_names=['input'],
        output_names=['output'],
        dynamic_axes={
            'input': {0: 'batch_size'},
            'output': {0: 'batch_size'}
        }
    )
    
    # V√©rifier le fichier
    if output_path.exists():
        size_mb = output_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ Mod√®le cr√©√© avec succ√®s !")
        print(f"üìä Taille: {size_mb:.2f} MB")
        print(f"üìÅ Emplacement: {output_path}")
        
        # Tester avec ONNX Runtime
        try:
            import onnxruntime as ort
            import numpy as np
            
            print("\nüîç V√©rification avec ONNX Runtime...")
            session = ort.InferenceSession(str(output_path))
            
            # Test
            input_data = np.random.randn(1, 3, 224, 224).astype(np.float32)
            outputs = session.run(None, {'input': input_data})
            
            # Appliquer softmax
            logits = outputs[0]
            exp_logits = np.exp(logits - np.max(logits, axis=1, keepdims=True))
            probs = exp_logits / np.sum(exp_logits, axis=1, keepdims=True)
            
            print(f"   Input shape: {input_data.shape}")
            print(f"   Output shape: {outputs[0].shape}")
            print(f"   Probabilities: {probs[0]}")
            print("‚úÖ Mod√®le ONNX valide !")
            
        except ImportError:
            print("‚ö†Ô∏è  ONNX Runtime non install√©, v√©rification ignor√©e")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors de la v√©rification: {e}")
        
        # Prochaines √©tapes
        print("\n" + "=" * 60)
        print("üìã Prochaines √©tapes:")
        print("=" * 60)
        print("1. Chiffrez le mod√®le:")
        print("   python scripts/encrypt_model.py")
        print("\n2. Lancez l'application:")
        print("   python main.py")
        print("\n3. Pour utiliser un vrai mod√®le:")
        print("   - Remplacez ce fichier par votre mod√®le entra√Æn√©")
        print("   - Re-chiffrez avec encrypt_model.py")
        print("=" * 60)
        
        return True
    else:
        print("‚ùå Erreur: Le fichier n'a pas √©t√© cr√©√©")
        return False


def main():
    """Fonction principale"""
    
    # Chemin de sortie
    output_path = input("\nChemin de sortie (d√©faut: models/breast_cancer_model.onnx): ").strip()
    if not output_path:
        output_path = "models/breast_cancer_model.onnx"
    
    # V√©rifier si le fichier existe d√©j√†
    if Path(output_path).exists():
        confirm = input(f"\n‚ö†Ô∏è  {output_path} existe d√©j√†. √âcraser ? (o/n): ").strip().lower()
        if confirm != 'o':
            print("‚ùå Op√©ration annul√©e")
            return
    
    # Cr√©er le mod√®le
    success = create_dummy_model(output_path)
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    main()

